# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Run tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Build APK"
  lane :build do
    gradle(task: "assembleRelease")
  end

  desc "Build and upload to internal track"
  lane :deploy_internal do
    gradle(
      task: "bundle",
      build_type: "Release"
    )

    upload_to_play_store(
      track: 'internal',
      aab: 'app/build/outputs/bundle/release/app-release.aab',
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end


desc "Bump versionName and versionCode for Android and commit"
lane :bump_version do
  gradle_file = "../app/build.gradle"

  # Extract current versionName
  version_line = File.readlines(gradle_file).find { |line| line.include?("versionName") }
  version = version_line[/\"(.*?)\"/, 1]

  # Increment patch version (e.g., 1.0.0 â†’ 1.0.1)
  segments = version.split('.').map(&:to_i)
  segments[-1] += 1
  new_version = segments.join('.')

  # Extract and increment versionCode
  version_code_line = File.readlines(gradle_file).find { |line| line.include?("versionCode") }
  version_code = version_code_line[/\d+/].to_i
  new_version_code = version_code + 1

  # Update versionName and versionCode in Gradle file
  new_contents = File.read(gradle_file)
                      .gsub(/versionName\s+"#{version}"/, "versionName \"#{new_version}\"")
                      .gsub(/versionCode\s+#{version_code}/, "versionCode #{new_version_code}")
  File.write(gradle_file, new_contents)

  UI.message("Old versionName: #{version}")
  UI.message("New versionName: #{new_version}")
  UI.message("Old versionCode: #{version_code}")
  UI.message("New versionCode: #{new_version_code}")

  # Ensure git identity is set (use defaults in CI if missing)
  user_name = sh("git config --get user.name || echo ''").strip
  user_email = sh("git config --get user.email || echo ''").strip

  if user_name.empty? || user_email.empty?
    UI.message("Git identity not set. Using CI defaults...")
    sh("git config user.name 'GitHub Actions'")
    sh("git config user.email 'actions@github.com'")
  end

  # Commit version bump
  sh("git add #{gradle_file}")
  sh("git commit -m 'Bump version to #{new_version} (code #{new_version_code})'")
end



  desc "Run all steps"
  lane :beta do
    prepare_google_services_json

    test
    build
   # deploy_internal
    bump_version
    cleanup_google_services_json
  end


  private_lane :prepare_google_services_json do
    UI.message("Current working directory: #{Dir.pwd}")
    UI.message("Listing files here:")
    sh "ls -la"

   # sh "cp google-services.json ../app/google-services.json"
  end


  private_lane :cleanup_google_services_json do
    UI.message("ðŸ§¹ Cleaning up google-services.json from app/")
    sh "rm ../app/google-services.json"
  end
end



